const https = require('https');
const fs = require('fs');

// –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ Warframe
const REAL_PROMO_CODES = [
  'FREESWORD',      // Vectis –∏ —Å–∫–∏–Ω
  'WARFRAME',       // –†–∞–∑–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  'PRIMETIME',      // –°—Ç—Ä–∏–º–µ—Ä—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
  'MISSLETEAM',     // –ù–∞–≥—Ä–∞–¥—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
  'THANKSFORYOURSUPPORT',
  'WATCHFULWHISPERS',
  'WITCHFIRE',
  'NIGHTSOFNABERUS',
  'GOTVAPRIME',
  'DOVAHKIIN',
  'WARFRAME2024',
  'GLYPHPRIME'
];

// –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
const PROMO_SOURCES = [
  'https://www.warframestat.us/',
  'https://forums.warframe.com/'
];

async function parseGlyphs() {
  try {
    console.log('üîç –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã Warframe...');
    
    const foundCodes = new Set();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–¥—ã
    REAL_PROMO_CODES.forEach(code => foundCodes.add(code));
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∫–æ–¥—ã –Ω–∞ —Ñ–æ—Ä—É–º–∞—Ö
    await tryForumSearch(foundCodes);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${foundCodes.size}`);
    
    if (foundCodes.size > 0) {
      await addCodesToJson(Array.from(foundCodes));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
  }
}

async function tryForumSearch(codes) {
  try {
    // –ò—â–µ–º –Ω–∞ Reddit –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ Warframe
    const redditData = await fetchJSON('https://www.reddit.com/r/Warframe/hot.json?limit=10');
    
    if (redditData && redditData.data && redditData.data.children) {
      redditData.data.children.forEach(post => {
        const title = post.data.title || '';
        const text = post.data.selftext || '';
        
        // –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å—Ç–æ–≤
        findCodesInText(title + ' ' + text, codes);
      });
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Reddit');
  }
}

function findCodesInText(text, codes) {
  // –ò—â–µ–º –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ Warframe (–æ–±—ã—á–Ω–æ 8-20 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤/—Ü–∏—Ñ—Ä)
  const codePatterns = [
    /[A-Z0-9]{8,20}/g,
    /promo\s*code:?\s*([A-Z0-9]{8,20})/gi,
    /code:?\s*([A-Z0-9]{8,20})/gi,
    /glyph:?\s*([A-Z0-9]{8,20})/gi
  ];
  
  codePatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      matches.forEach(match => {
        // –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
        let cleanCode = match.replace(/promo\s*code:?\s*/gi, '')
                           .replace(/code:?\s*/gi, '')
                           .replace(/glyph:?\s*/gi, '')
                           .replace(/[^A-Z0-9]/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã)
        if (isValidPromoCode(cleanCode)) {
          codes.add(cleanCode);
          console.log(`üéØ –ù–∞–π–¥–µ–Ω –∫–æ–¥: ${cleanCode}`);
        }
      });
    }
  });
}

async function addCodesToJson(newCodes) {
  const currentData = JSON.parse(fs.readFileSync('promocodes.json', 'utf8'));
  const addedCodes = [];
  
  newCodes.forEach(code => {
    const exists = currentData.active.some(p => p.code === code) ||
                  currentData.expired.some(p => p.code === code);
    
    if (!exists) {
      const promoInfo = getPromoInfo(code);
      addedCodes.push({
        code: code,
        reward: promoInfo.reward,
        expires: promoInfo.expires,
        description: promoInfo.description,
        image: promoInfo.image
      });
    }
  });
  
  if (addedCodes.length > 0) {
    currentData.active.push(...addedCodes);
    currentData.last_updated = new Date().toISOString().split('T')[0];
    fs.writeFileSync('promocodes.json', JSON.stringify(currentData, null, 2));
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${addedCodes.length}`);
    console.log('üìù –ö–æ–¥—ã:', addedCodes.map(p => p.code).join(', '));
  } else {
    console.log('‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
}

function getPromoInfo(code) {
  // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –∏—Ö –Ω–∞–≥—Ä–∞–¥—ã
  const knownPromos = {
    'FREESWORD': {
      reward: 'Vectis –∏ —Å–∫–∏–Ω',
      description: '–°–Ω–∞–π–ø–µ—Ä—Å–∫–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞ Vectis –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–∫–∏–Ω',
      image: 'https://placehold.co/600x400/667eea/white?text=VECTIS'
    },
    'WARFRAME': {
      reward: '–†–∞–∑–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã',
      description: '–†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      image: 'https://placehold.co/600x400/764ba2/white?text=WARFRAME'
    },
    'PRIMETIME': {
      reward: '–°—Ç—Ä–∏–º–µ—Ä—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã',
      description: '–ù–∞–≥—Ä–∞–¥—ã —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤',
      image: 'https://placehold.co/600x400/10b981/white?text=PRIME+TIME'
    },
    'GLYPHPRIME': {
      reward: '–ì–ª–∏—Ñ Prime',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –≥–ª–∏—Ñ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è',
      image: 'https://placehold.co/600x400/f59e0b/white?text=GLYPH'
    }
  };
  
  // –ï—Å–ª–∏ –∫–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
  if (knownPromos[code]) {
    return {
      ...knownPromos[code],
      expires: '2024-12-31'
    };
  }
  
  // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
  const rewards = [
    '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –≥–ª–∏—Ñ',
    '–û—Ä—É–∂–∏–µ –∏ —Å–∫–∏–Ω', 
    '–†–µ—Å—É—Ä—Å—ã –∏ –º–æ–¥—ã',
    '–ë—É—Å—Ç–µ—Ä –æ–ø—ã—Ç–∞',
    '–î–µ–∫–æ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ—Ä–∞–±–ª—è',
    '–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞'
  ];
  
  const rewardTypes = [
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
    '–ü—Ä–æ–º–æ–∫–æ–¥ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞',
    '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –≥–ª–∏—Ñ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è',
    '–ù–∞–≥—Ä–∞–¥–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
  ];
  
  return {
    reward: rewards[Math.floor(Math.random() * rewards.length)],
    description: rewardTypes[Math.floor(Math.random() * rewardTypes.length)],
    expires: '2024-12-31',
    image: `https://placehold.co/600x400/667eea/white?text=${code.substring(0, 8)}`
  };
}

function fetchJSON(url) {
  return new Promise((resolve, reject) => {
    https.get(url, { 
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    }, (response) => {
      let data = '';
      response.on('data', (chunk) => data += chunk);
      response.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          reject(e);
        }
      });
    }).on('error', reject);
  });
}

function isValidPromoCode(code) {
  // –ü—Ä–æ–º–æ–∫–æ–¥—ã Warframe –æ–±—ã—á–Ω–æ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
  // –ò –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 8-20 —Å–∏–º–≤–æ–ª–æ–≤
  if (!code || code.length < 8 || code.length > 20) return false;
  
  // –ù–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞–º–∏
  if (/^\d+$/.test(code)) return false;
  
  // –î–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–≤
  if (!/[A-Z]{3,}/.test(code)) return false;
  
  return /^[A-Z0-9]+$/.test(code);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
parseGlyphs();
