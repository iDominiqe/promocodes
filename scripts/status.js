// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const SERVERS = [
    { name: '–õ–æ–≥–∏–Ω —Å–µ—Ä–≤–µ—Ä', url: 'https://warframe.com', region: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π' },
    { name: '–ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä EU', url: 'https://content.warframe.com', region: '–ï–≤—Ä–æ–ø–∞' },
    { name: '–ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä NA', url: 'https://content.origin.warframe.com', region: '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞' },
    { name: '–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞', url: 'https://warframe.market', region: '–ú–∞—Ä–∫–µ—Ç' },
    { name: '–§–æ—Ä—É–º', url: 'https://forums.warframe.com', region: '–§–æ—Ä—É–º' },
    { name: 'Wiki', url: 'https://warframe.fandom.com', region: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π' }
];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ API)
const PLAYER_STATS = {
    online: '45,000+',
    peak: '67,892',
    update: '5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥'
};

async function initStatusPage() {
    updateLastChecked();
    await checkAllServers();
    updatePlayerStats();
    startAutoRefresh();
}

function updateLastChecked() {
    const now = new Date();
    document.getElementById('last-check').textContent = now.toLocaleString('ru-RU');
    document.getElementById('status-last-updated').textContent = 
        `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${now.toLocaleString('ru-RU')}`;
}

async function checkAllServers() {
    const serverList = document.getElementById('server-status');
    serverList.innerHTML = '<div class="loading">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...</div>';

    const results = [];
    
    for (const server of SERVERS) {
        const status = await checkServerStatus(server);
        results.push({ ...server, status });
    }

    displayServerStatus(results);
}

async function checkServerStatus(server) {
    try {
        const startTime = Date.now();
        const response = await fetch(server.url, { 
            method: 'HEAD',
            mode: 'no-cors',
            cache: 'no-cache'
        });
        const responseTime = Date.now() - startTime;

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª, —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω
        return {
            online: true,
            responseTime: responseTime,
            lastChecked: new Date()
        };
    } catch (error) {
        return {
            online: false,
            responseTime: null,
            lastChecked: new Date(),
            error: error.message
        };
    }
}

function displayServerStatus(servers) {
    const serverList = document.getElementById('server-status');
    const overallStatus = document.querySelector('.status-card.online h3');
    
    let onlineCount = 0;
    let totalResponseTime = 0;
    let responseCount = 0;

    serverList.innerHTML = servers.map(server => {
        const isOnline = server.status.online;
        const responseTime = server.status.responseTime;
        
        if (isOnline) {
            onlineCount++;
            if (responseTime) {
                totalResponseTime += responseTime;
                responseCount++;
            }
        }

        return `
            <div class="server-card ${isOnline ? 'online' : 'offline'}">
                <div class="server-header">
                    <h3>${server.name}</h3>
                    <span class="status-indicator ${isOnline ? 'online' : 'offline'}">
                        ${isOnline ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω'}
                    </span>
                </div>
                <p class="server-region">${server.region}</p>
                ${isOnline && responseTime ? 
                    `<p class="response-time">‚è± ${responseTime} –º—Å</p>` : 
                    '<p class="response-time">‚è± -- –º—Å</p>'
                }
                <small>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${server.status.lastChecked.toLocaleTimeString('ru-RU')}</small>
            </div>
        `;
    }).join('');

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    const overallOnline = onlineCount === SERVERS.length;
    overallStatus.textContent = overallOnline ? 'üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ' : 'üü° –ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–±–æ–∏';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    if (responseCount > 0) {
        const avgResponseTime = Math.round(totalResponseTime / responseCount);
        document.getElementById('response-time').textContent = `${avgResponseTime} –º—Å`;
    }
}

function updatePlayerStats() {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ API Steam –∏–ª–∏ Warframe
    document.getElementById('players-online').textContent = PLAYER_STATS.online;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    const incidentList = document.getElementById('incident-list');
    incidentList.innerHTML = `
        <div class="incident-item resolved">
            <span class="incident-status">‚úÖ –†–µ—à–µ–Ω–æ</span>
            <span class="incident-date">28.09.2024 14:30</span>
            <p>–ü–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ - –∑–∞–≤–µ—Ä—à–µ–Ω–æ</p>
        </div>
        <div class="incident-item monitoring">
            <span class="incident-status">üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</span>
            <span class="incident-date">25.09.2024 09:15</span>
            <p>–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</p>
        </div>
        <div class="incident-item resolved">
            <span class="incident-status">‚úÖ –†–µ—à–µ–Ω–æ</span>
            <span class="incident-date">20.09.2024 18:45</span>
            <p>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –∑–∞–≤–µ—Ä—à–µ–Ω–æ</p>
        </div>
    `;
}

function startAutoRefresh() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
        console.log('–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...');
        initStatusPage();
    }, 5 * 60 * 1000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initStatusPage);
